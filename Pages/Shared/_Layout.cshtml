<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MetricsApp</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.0/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <div class="main-wrapper">
        <aside class="sidebar menu" id="appSidebar">
            <div class="navbar-brand is-justify-content-center mt-4 mb-4">
                <a asp-page="/Index" class="has-text-weight-bold is-size-4 has-text-grey-dark">
                    <span>MetricsApp</span>
                </a>
            </div>

            <p class="menu-label">
                General
            </p>
            <ul class="menu-list">
                <li><a asp-page="/Index" class="is-active"> <i class="fas fa-chart-line fa-fw"></i> <span>Dashboard</span></a></li>
                <li><a asp-page="/MetricsOverview"> <i class="fas fa-tasks fa-fw"></i> <span>Metrics Overview</span></a></li>
                </ul>
            <p class="menu-label">
                Admin
            </p>
            <ul class="menu-list">
                <li><a asp-page="/PerformanceCounters"> <i class="fas fa-tachometer-alt fa-fw"></i> <span>Performance</span></a></li>
                <li><a asp-page="/Settings"> <i class="fas fa-cog fa-fw"></i> <span>Settings</span></a></li>
            </ul>
            </aside>

        <div class="content-wrapper is-flex-grow-1">
            <nav class="top-navbar" role="navigation" aria-label="main navigation">
                <div class="navbar-start">
                    <button class="button is-ghost" id="sidebarToggle" aria-label="menu" aria-expanded="false">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>
                <div class="navbar-end">
                    <div class="navbar-item">
                        <button class="button is-ghost" id="themeToggle" aria-label="toggle theme">
                            <i class="fas fa-moon"></i> </button>
                    </div>
                </div>
            </nav>

            <main class="content-area section">
                @RenderBody()
            </main>

            <footer class="footer">
                <div class="content has-text-centered">
                    <p>
                        &copy; @DateTime.Now.Year - MetricsApp - <a asp-page="/Privacy">Privacy</a>
                    </p>
                </div>
            </footer>
        </div>
    </div>

    <script>
        const themeToggle = document.getElementById('themeToggle');
        const htmlElement = document.documentElement;
        const currentTheme = localStorage.getItem('theme') ? localStorage.getItem('theme') : null;

        if (currentTheme) {
            htmlElement.setAttribute('data-theme', currentTheme);
            if (currentTheme === 'dark') {
                themeToggle.querySelector('i').classList.remove('fa-moon');
                themeToggle.querySelector('i').classList.add('fa-sun');
            }
        } else { 
             if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                htmlElement.setAttribute('data-theme', 'dark');
                themeToggle.querySelector('i').classList.remove('fa-moon');
                themeToggle.querySelector('i').classList.add('fa-sun');
             }
        }


        themeToggle.addEventListener('click', () => {
            let currentMode = htmlElement.getAttribute('data-theme');
            if (currentMode === 'dark') {
                htmlElement.setAttribute('data-theme', 'light');
                localStorage.setItem('theme', 'light');
                themeToggle.querySelector('i').classList.remove('fa-sun');
                themeToggle.querySelector('i').classList.add('fa-moon');
            } else {
                htmlElement.setAttribute('data-theme', 'dark');
                localStorage.setItem('theme', 'dark');
                themeToggle.querySelector('i').classList.remove('fa-moon');
                themeToggle.querySelector('i').classList.add('fa-sun');
            }
        });


        const sidebarToggle = document.getElementById('sidebarToggle');
        const appSidebar = document.getElementById('appSidebar');
        const contentWrapper = document.querySelector('.content-wrapper') || {}; // Includes top-navbar, content-area, footer

        const topNavbar = document.querySelector('.top-navbar');
        const contentArea = document.querySelector('.content-area');
        const pageFooter = document.querySelector('.footer');


        const isDesktop = () => window.innerWidth > 768; // Bulma's mobile breakpoint

        function applySidebarState() {
            let sidebarCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
            if (isDesktop()) {
                appSidebar.classList.remove('is-active-mobile'); // Ensure mobile overlay is off
                if (sidebarCollapsed) {
                    appSidebar.classList.add('collapsed');
                    if(topNavbar) topNavbar.classList.add('collapsed-sidebar');
                    if(contentArea) contentArea.classList.add('collapsed-sidebar');
                    if(pageFooter) pageFooter.classList.add('collapsed-sidebar');
                } else {
                    appSidebar.classList.remove('collapsed');
                    if(topNavbar) topNavbar.classList.remove('collapsed-sidebar');
                    if(contentArea) contentArea.classList.remove('collapsed-sidebar');
                    if(pageFooter) pageFooter.classList.remove('collapsed-sidebar');
                }
            } else { // Mobile
                appSidebar.classList.remove('collapsed'); // Desktop collapse doesn't apply
                 if(topNavbar) topNavbar.classList.remove('collapsed-sidebar');
                 if(contentArea) contentArea.classList.remove('collapsed-sidebar');
                 if(pageFooter) pageFooter.classList.remove('collapsed-sidebar');
                // Mobile sidebar is an overlay, not affecting content margin
                // Its open/close state is managed by 'is-active-mobile'
            }
        }


        sidebarToggle.addEventListener('click', () => {
            if (isDesktop()) {
                let isCollapsed = appSidebar.classList.toggle('collapsed');
                localStorage.setItem('sidebarCollapsed', isCollapsed);
                if(topNavbar) topNavbar.classList.toggle('collapsed-sidebar', isCollapsed);
                if(contentArea) contentArea.classList.toggle('collapsed-sidebar', isCollapsed);
                if(pageFooter) pageFooter.classList.toggle('collapsed-sidebar', isCollapsed);

            } else { // Mobile: toggle overlay
                appSidebar.classList.toggle('is-active-mobile');
            }
        });
        
        // Initial state application
        applySidebarState();
        window.addEventListener('resize', applySidebarState);

        // Active sidebar link (simple version, can be improved with Razor)
        document.addEventListener('DOMContentLoaded', function () {
            const currentPage = window.location.pathname;
            const sidebarLinks = appSidebar.querySelectorAll('.menu-list a');
            sidebarLinks.forEach(link => {
                if (link.getAttribute('href') === currentPage) {
                    link.classList.add('is-active');
                } else {
                    link.classList.remove('is-active');
                }
            });
        });

    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>