<!DOCTYPE html>
<html lang="en" data-theme="light">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MetricsApp</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/shadcn-inspired.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>

<body class="bg-background text-foreground">
    <div class="flex min-h-screen">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="sidebar-brand">
                    <a asp-page="/Index">
                        <div class="sidebar-logo">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <span class="sidebar-title">MetricsApp</span>
                    </a>
                </div>
                <button class="sidebar-toggle btn btn-icon btn-ghost" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
            </div>

            <nav class="sidebar-nav">
                <div class="nav-section">
                    <div class="nav-section-title">General</div>
                    <ul class="nav-list">
                        <li>
                            <a asp-page="/Index" class="nav-link">
                                <i class="fas fa-chart-line nav-icon"></i>
                                <span class="nav-text">Dashboard</span>
                            </a>
                        </li>
                        <li> 
                            <a asp-page="/MetricsOverview" class="nav-link"> 
                                <i class="fa-thin fa-city nav-icon"></i>
                                <span class="nav-text">Analytics Overview</span> 
                            </a> 
                        </li>
                    </ul>
                </div>

                <div class="nav-section">
                    <div class="nav-section-title">Admin</div>
                    <ul class="nav-list">
                        <li>
                            <a asp-page="/PerformanceCounters" class="nav-link">
                                <i class="fas fa-tachometer-alt nav-icon"></i>
                                <span class="nav-text">Performance</span>
                            </a>
                        </li>
                        <li> 
                            <a asp-page="/Settings" class="nav-link"> 
                                <i class="fas fa-sliders-h nav-icon"></i> 
                                <span class="nav-text">Dashboard Config</span> 
                            </a> 
                        </li>
                    </ul>
                </div>

                <div class="nav-section">
                    <div class="nav-section-title">Design System</div>
                    <ul class="nav-list">
                        <li>
                            <a asp-page="/ShadcnDemo" class="nav-link">
                                <i class="fas fa-palette nav-icon"></i>
                                <span class="nav-text">Components</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Theme Toggle in Sidebar Footer -->
            <div class="sidebar-footer">
                <button class="theme-toggle btn btn-ghost w-full" id="themeToggle">
                    <i class="fas fa-moon theme-icon"></i>
                    <span class="nav-text">Toggle Theme</span>
                </button>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <div class="content-container">
                @RenderBody()
            </div>
        </main>
    </div>

    <!-- Mobile Overlay -->
    <div class="mobile-overlay" id="mobileOverlay"></div>

    <!-- Toast Container -->
    @* <div class="toast-viewport" id="toastContainer"></div> *@
    @* *@
    <!-- Toast Container -->
    <div id="toastContainer" style="position: fixed; top: 1rem; right: 1rem; z-index: 100;"></div>

    <script>
        class MetricsApp {
            constructor() {
                this.sidebar = document.getElementById('sidebar');
                this.mainContent = document.getElementById('mainContent');
                this.sidebarToggle = document.getElementById('sidebarToggle');
                this.themeToggle = document.getElementById('themeToggle');
                this.mobileOverlay = document.getElementById('mobileOverlay');
                this.toastContainer = document.getElementById('toastContainer');

                this.init();
            }

            init() {
                this.initSidebar();
                this.initTheme();
                this.setActiveNavLink();
                this.attachEventListeners();
            }

            initTheme() {
                const savedTheme = localStorage.getItem('theme');
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                const theme = savedTheme || (prefersDark ? 'dark' : 'light');
                this.setTheme(theme);
            }

            setTheme(theme) {
                document.documentElement.setAttribute('data-theme', theme);
                document.documentElement.className = theme;
                localStorage.setItem('theme', theme);

                const icon = this.themeToggle.querySelector('.theme-icon');
                icon.className = theme === 'dark' ? 'fas fa-sun theme-icon' : 'fas fa-moon theme-icon';

                // Notify charts about theme change
                if (window.updateAllChartThemes) {
                    window.updateAllChartThemes(theme);
                }
            }

            toggleTheme() {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                this.setTheme(newTheme);
                this.showToast(`Switched to ${newTheme} mode`, 'success');
            }

            initSidebar() {
                const isCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
                if (window.innerWidth > 768 && isCollapsed) {
                    this.sidebar.classList.add('collapsed');
                }
            }

            toggleSidebar() {
                if (window.innerWidth <= 768) {
                    // Mobile behavior
                    this.sidebar.classList.toggle('mobile-open');
                    this.mobileOverlay.classList.toggle('active');
                } else {
                    // Desktop behavior
                    this.sidebar.classList.toggle('collapsed');
                    localStorage.setItem('sidebarCollapsed', this.sidebar.classList.contains('collapsed'));
                }
            }

            closeMobileSidebar() {
                this.sidebar.classList.remove('mobile-open');
                this.mobileOverlay.classList.remove('active');
            }

            setActiveNavLink() {
                const currentPath = window.location.pathname;
                const navLinks = document.querySelectorAll('.nav-link');

                navLinks.forEach(link => {
                    const linkPath = link.getAttribute('href') || link.getAttribute('asp-page');
                    link.classList.remove('active');

                    if (linkPath === currentPath ||
                        (currentPath === '/' && (linkPath === '/Index' || linkPath === '/')) ||
                        (linkPath && currentPath.includes(linkPath) && linkPath !== '/')) {
                        link.classList.add('active');
                    }
                });
            }

            showToast(message, type = 'default', duration = 3000) {
                const toast = document.createElement('div');
                toast.className = `toast-item ${type}`;
                toast.innerHTML = `
                    <div class="toast-content">
                        <div class="toast-title">${this.getToastTitle(type)}</div>
                        <div class="toast-description">${message}</div>
                    </div>
                    <button class="toast-close" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                `;

                this.toastContainer.appendChild(toast);

                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.style.opacity = '0';
                        toast.style.transform = 'translateX(100%)';
                        setTimeout(() => toast.remove(), 300);
                    }
                }, duration);
            }

            getToastTitle(type) {
                const titles = {
                    success: 'Success',
                    error: 'Error',
                    warning: 'Warning',
                    info: 'Info'
                };
                return titles[type] || 'Notification';
            }

            attachEventListeners() {
                this.sidebarToggle?.addEventListener('click', () => this.toggleSidebar());
                this.themeToggle?.addEventListener('click', () => this.toggleTheme());
                this.mobileOverlay?.addEventListener('click', () => this.closeMobileSidebar());

                // Handle window resize
                window.addEventListener('resize', () => {
                    if (window.innerWidth > 768) {
                        this.closeMobileSidebar();
                    }
                });

                // Handle navigation changes
                window.addEventListener('popstate', () => this.setActiveNavLink());
            }
        }

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            window.metricsApp = new MetricsApp();
        });

        // Global theme update function for charts
        window.updateChartsTheme = function (theme) {
            if (window.updateAllChartThemes) {
                window.updateAllChartThemes(theme);
            }
        };
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>